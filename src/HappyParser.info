-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from src/HappyParser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> All                                (0)
	All -> Asgn                                        (1)
	All -> UDF                                         (2)
	All -> UDO                                         (3)
	All -> Expr                                        (4)
	Asgn -> let var '=' Expr                           (5)
	UDF -> fun var '(' vars ')' '=' Expr               (6)
	UDO -> fop var '(' num ',' num ')' '=' Expr        (7)
	Expr -> UMinus                                     (8)
	Expr -> OpCall                                     (9)
	Expr -> Par                                        (10)
	Expr -> FunCall                                    (11)
	Expr -> Number                                     (12)
	Expr -> Id                                         (13)
	vars -> Id                                         (14)
	vars -> vars ',' Id                                (15)
	UMinus -> '-' Expr                                 (16)
	OpCall -> op Expr Expr                             (17)
	FunCall -> fn '(' exprs ')'                        (18)
	exprs -> Expr                                      (19)
	exprs -> exprs ',' Expr                            (20)
	Number -> num                                      (21)
	Id -> var                                          (22)
	Par -> '(' Expr ')'                                (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TNumber $$ }
	var            { TIdent $$ }
	op             { TOp $$ }
	'('            { TLPar }
	')'            { TRPar }
	','            { TComma }
	'='            { TEqual }
	'-'            { TMinus }
	let            { TLet }
	fun            { TFun }
	fop            { TEnd }
	fn             { TFIdent $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	All             rules 1, 2, 3, 4
	Asgn            rule  5
	UDF             rule  6
	UDO             rule  7
	Expr            rules 8, 9, 10, 11, 12, 13
	vars            rules 14, 15
	UMinus          rule  16
	OpCall          rule  17
	FunCall         rule  18
	exprs           rules 19, 20
	Number          rule  21
	Id              rule  22
	Par             rule  23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	let            shift, and enter state 3
	fun            shift, and enter state 19
	fop            shift, and enter state 20
	fn             shift, and enter state 21

	All            goto state 4
	Asgn           goto state 2
	UDF            goto state 5
	UDO            goto state 6
	Expr           goto state 7
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 1


	let            shift, and enter state 3

	Asgn           goto state 2

State 2

	All -> Asgn .                                       (rule 1)

	%eof           reduce using rule 1


State 3

	Asgn -> let . var '=' Expr                          (rule 5)

	var            shift, and enter state 28


State 4

	%start_parse -> All .                               (rule 0)

	%eof           accept


State 5

	All -> UDF .                                        (rule 2)

	%eof           reduce using rule 2


State 6

	All -> UDO .                                        (rule 3)

	%eof           reduce using rule 3


State 7

	All -> Expr .                                       (rule 4)

	%eof           reduce using rule 4


State 8

	Expr -> UMinus .                                    (rule 8)

	num            reduce using rule 8
	var            reduce using rule 8
	op             reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	fn             reduce using rule 8
	%eof           reduce using rule 8


State 9

	Expr -> OpCall .                                    (rule 9)

	num            reduce using rule 9
	var            reduce using rule 9
	op             reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	fn             reduce using rule 9
	%eof           reduce using rule 9


State 10

	Expr -> FunCall .                                   (rule 11)

	num            reduce using rule 11
	var            reduce using rule 11
	op             reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	fn             reduce using rule 11
	%eof           reduce using rule 11


State 11

	Expr -> Number .                                    (rule 12)

	num            reduce using rule 12
	var            reduce using rule 12
	op             reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	fn             reduce using rule 12
	%eof           reduce using rule 12


State 12

	Expr -> Id .                                        (rule 13)

	num            reduce using rule 13
	var            reduce using rule 13
	op             reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	fn             reduce using rule 13
	%eof           reduce using rule 13


State 13

	Expr -> Par .                                       (rule 10)

	num            reduce using rule 10
	var            reduce using rule 10
	op             reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	fn             reduce using rule 10
	%eof           reduce using rule 10


State 14

	Number -> num .                                     (rule 21)

	num            reduce using rule 21
	var            reduce using rule 21
	op             reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	'-'            reduce using rule 21
	fn             reduce using rule 21
	%eof           reduce using rule 21


State 15

	Id -> var .                                         (rule 22)

	num            reduce using rule 22
	var            reduce using rule 22
	op             reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	fn             reduce using rule 22
	%eof           reduce using rule 22


State 16

	OpCall -> op . Expr Expr                            (rule 17)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 27
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 17

	Par -> '(' . Expr ')'                               (rule 23)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 26
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 18

	UMinus -> '-' . Expr                                (rule 16)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 25
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 19

	UDF -> fun . var '(' vars ')' '=' Expr              (rule 6)

	var            shift, and enter state 24


State 20

	UDO -> fop . var '(' num ',' num ')' '=' Expr       (rule 7)

	var            shift, and enter state 23


State 21

	FunCall -> fn . '(' exprs ')'                       (rule 18)

	'('            shift, and enter state 22


State 22

	FunCall -> fn '(' . exprs ')'                       (rule 18)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 34
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	exprs          goto state 35
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 23

	UDO -> fop var . '(' num ',' num ')' '=' Expr       (rule 7)

	'('            shift, and enter state 33


State 24

	UDF -> fun var . '(' vars ')' '=' Expr              (rule 6)

	'('            shift, and enter state 32


State 25

	UMinus -> '-' Expr .                                (rule 16)

	num            reduce using rule 16
	var            reduce using rule 16
	op             reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	'-'            reduce using rule 16
	fn             reduce using rule 16
	%eof           reduce using rule 16


State 26

	Par -> '(' Expr . ')'                               (rule 23)

	')'            shift, and enter state 31


State 27

	OpCall -> op Expr . Expr                            (rule 17)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 30
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 28

	Asgn -> let var . '=' Expr                          (rule 5)

	'='            shift, and enter state 29


State 29

	Asgn -> let var '=' . Expr                          (rule 5)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 41
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 30

	OpCall -> op Expr Expr .                            (rule 17)

	num            reduce using rule 17
	var            reduce using rule 17
	op             reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	','            reduce using rule 17
	'-'            reduce using rule 17
	fn             reduce using rule 17
	%eof           reduce using rule 17


State 31

	Par -> '(' Expr ')' .                               (rule 23)

	num            reduce using rule 23
	var            reduce using rule 23
	op             reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	fn             reduce using rule 23
	%eof           reduce using rule 23


State 32

	UDF -> fun var '(' . vars ')' '=' Expr              (rule 6)

	var            shift, and enter state 15

	vars           goto state 39
	Id             goto state 40

State 33

	UDO -> fop var '(' . num ',' num ')' '=' Expr       (rule 7)

	num            shift, and enter state 38


State 34

	exprs -> Expr .                                     (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19


State 35

	FunCall -> fn '(' exprs . ')'                       (rule 18)
	exprs -> exprs . ',' Expr                           (rule 20)

	')'            shift, and enter state 36
	','            shift, and enter state 37


State 36

	FunCall -> fn '(' exprs ')' .                       (rule 18)

	num            reduce using rule 18
	var            reduce using rule 18
	op             reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	fn             reduce using rule 18
	%eof           reduce using rule 18


State 37

	exprs -> exprs ',' . Expr                           (rule 20)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 45
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 38

	UDO -> fop var '(' num . ',' num ')' '=' Expr       (rule 7)

	','            shift, and enter state 44


State 39

	UDF -> fun var '(' vars . ')' '=' Expr              (rule 6)
	vars -> vars . ',' Id                               (rule 15)

	')'            shift, and enter state 42
	','            shift, and enter state 43


State 40

	vars -> Id .                                        (rule 14)

	')'            reduce using rule 14
	','            reduce using rule 14


State 41

	Asgn -> let var '=' Expr .                          (rule 5)

	%eof           reduce using rule 5


State 42

	UDF -> fun var '(' vars ')' . '=' Expr              (rule 6)

	'='            shift, and enter state 48


State 43

	vars -> vars ',' . Id                               (rule 15)

	var            shift, and enter state 15

	Id             goto state 47

State 44

	UDO -> fop var '(' num ',' . num ')' '=' Expr       (rule 7)

	num            shift, and enter state 46


State 45

	exprs -> exprs ',' Expr .                           (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20


State 46

	UDO -> fop var '(' num ',' num . ')' '=' Expr       (rule 7)

	')'            shift, and enter state 50


State 47

	vars -> vars ',' Id .                               (rule 15)

	')'            reduce using rule 15
	','            reduce using rule 15


State 48

	UDF -> fun var '(' vars ')' '=' . Expr              (rule 6)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 49
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 49

	UDF -> fun var '(' vars ')' '=' Expr .              (rule 6)

	%eof           reduce using rule 6


State 50

	UDO -> fop var '(' num ',' num ')' . '=' Expr       (rule 7)

	'='            shift, and enter state 51


State 51

	UDO -> fop var '(' num ',' num ')' '=' . Expr       (rule 7)

	num            shift, and enter state 14
	var            shift, and enter state 15
	op             shift, and enter state 16
	'('            shift, and enter state 17
	'-'            shift, and enter state 18
	fn             shift, and enter state 21

	Expr           goto state 52
	UMinus         goto state 8
	OpCall         goto state 9
	FunCall        goto state 10
	Number         goto state 11
	Id             goto state 12
	Par            goto state 13

State 52

	UDO -> fop var '(' num ',' num ')' '=' Expr .       (rule 7)

	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 12
Number of non-terminals: 14
Number of states: 53
